-- Step 1: Approved transactions in last 30 days
WITH recent_approved AS (
  SELECT
    account_number,
    amount,
    transaction_date
  FROM transactions
  WHERE decision = 'Approved'
    AND transaction_date BETWEEN DATE_SUB(CURRENT_DATE, 30) AND CURRENT_DATE
),

-- Step 2: Approximate 95th percentile per account via row_number
ranked_approved AS (
  SELECT
    account_number,
    amount,
    ROW_NUMBER() OVER (PARTITION BY account_number ORDER BY amount) AS rn,
    COUNT(*) OVER (PARTITION BY account_number) AS cnt
  FROM recent_approved
),

account_thresholds AS (
  SELECT
    account_number,
    amount AS p95_amt
  FROM ranked_approved
  WHERE rn = CAST(cnt * 0.95 AS INT)
),

-- Step 3: Count 3-day policy declines before each transaction
decline_join AS (
  SELECT
    t.transaction_id,
    t.account_number,
    t.transaction_date,
    t.amount,
    t.decision,
    COUNT(t2.transaction_id) AS decline_3d
  FROM transactions t
  LEFT JOIN transactions t2
    ON t.account_number = t2.account_number
    AND t2.transaction_date BETWEEN DATE_SUB(t.transaction_date, 3) AND DATE_SUB(t.transaction_date, 1)
    AND t2.decision = 'Policy Decline'
  WHERE t.transaction_date BETWEEN DATE_SUB(CURRENT_DATE, 30) AND CURRENT_DATE
  GROUP BY t.transaction_id, t.account_number, t.transaction_date, t.amount, t.decision
),

-- Step 4: Identify rebound transactions
rebound_flags AS (
  SELECT
    d.transaction_id,
    d.account_number,
    d.transaction_date,
    d.amount,
    CASE 
      WHEN d.decision = 'Approved'
           AND d.amount > a.p95_amt
           AND d.decline_3d >= 2 THEN 1
      ELSE 0
    END AS rebound_flag
  FROM decline_join d
  LEFT JOIN account_thresholds a
    ON d.account_number = a.account_number
),

-- Step 5: Only the actual flagged rebound transactions
flagged_rebounds AS (
  SELECT *
  FROM rebound_flags
  WHERE rebound_flag = 1
),

-- Step 6: Link rebound transactions to claims within 1â€“10 days
rebound_with_claims AS (
  SELECT
    r.account_number,
    r.transaction_id,
    r.transaction_date,
    r.amount,
    c.claim_entry_date,
    CASE
      WHEN c.claim_entry_date BETWEEN DATE_ADD(r.transaction_date, 1) AND DATE_ADD(r.transaction_date, 10)
           THEN 1 ELSE 0
    END AS claim_within_10d
  FROM flagged_rebounds r
  LEFT JOIN claims c
    ON r.account_number = c.account_number
       AND c.claim_entry_date BETWEEN DATE_ADD(r.transaction_date, 1) AND DATE_ADD(r.transaction_date, 10)
),

-- Step 7: Count rebound events and claims per account
final_account_flags AS (
  SELECT
    account_number,
    COUNT(*) AS rebound_event_count,
    COUNT(CASE WHEN claim_within_10d = 1 THEN 1 END) AS claims_within_10d
  FROM rebound_with_claims
  GROUP BY account_number
)

-- Final output: accounts with 2+ rebounds and at least 1 claim within 10 days
SELECT *
FROM final_account_flags
WHERE rebound_event_count >= 2;
