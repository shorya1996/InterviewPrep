import json
import pandas as pd
import re

# Simulate your Excel input
data = {
    "requestId": ["abc123"],
    "customerMerchantRelationshipAssessment.assessmentIndicatorList[].indicator[0]": [True],
    "customerMerchantRelationshipAssessment.assessmentIndicatorList[].name[0]": ["payment MethodExists Flag"],
    "customerMerchantRelationshipAssessment.assessmentIndicatorList[].indicator[1]": [True],
    "customerMerchantRelationshipAssessment.assessmentIndicatorList[].name[1]": ["customer MerchantRelationshipExistsFlag"]
}

df = pd.DataFrame(data)

# === Helper Functions ===
def smart_cast(val):
    if isinstance(val, float) and val.is_integer():
        return int(val)
    return val

def parse_path(path):
    path = re.sub(r"\{[^}]*\}", "", path)
    parts = []
    for segment in path.split("."):
        match = re.match(r"(.*?)\[(\d+)\]$", segment)
        if match:
            field_name, idx = match.groups()
            parts.append((field_name, "indexed_array", int(idx)))
        elif "[]" in segment:
            parts.append((segment.replace("[]", ""), "array", None))
        else:
            parts.append((segment, "dict", None))
    return parts

def insert_nested(root, path, value):
    if not path:
        return value

    key, kind, index = path[0]

    if kind == "indexed_array":
        if key not in root or not isinstance(root[key], list):
            root[key] = []
        while len(root[key]) <= index:
            root[key].append({})
        if not isinstance(root[key][index], dict):
            root[key][index] = {}
        root[key][index] = insert_nested(root[key][index], path[1:], value)

    elif kind == "array":
        if key not in root or not isinstance(root[key], list):
            root[key] = []
        if not root[key]:
            root[key].append({})
        if not isinstance(root[key][0], dict):
            root[key][0] = {}
        root[key][0] = insert_nested(root[key][0], path[1:], value)

    else:
        if key not in root or not isinstance(root[key], dict):
            root[key] = {}
        if path[1:]:
            root[key] = insert_nested(root[key], path[1:], value)
        else:
            root[key] = value

    return root

# === Build Output ===
json_requests = []

for _, row in df.iterrows():
    request = {"headers": {}, "body": {}}
    for col in df.columns:
        val = row[col]
        if pd.isna(val): continue
        val = smart_cast(val)
        if col in ["requestId"]:
            request["headers"][col] = val
        else:
            path = parse_path(col)
            insert_nested(request["body"], path, val)
    json_requests.append(request)

# === Show result ===
print(json.dumps(json_requests, indent=2))
