import pandas as pd
import json
import re

# === CONFIG ===
input_file = "your_excel_file.xlsx"     # üîÅ Replace with your file path
output_file = "final_output.json"
header_columns_count = 4                # üîÅ First N columns are headers

# === TYPE CASTING ===
def smart_cast(val):
    if isinstance(val, float) and val.is_integer():
        return int(val)
    return val

# === PARSE COLUMN NAME INTO STRUCTURED PATH ===
def parse_path(path):
    # Remove type hints like {CurrencyAmount}
    path = re.sub(r"\{[^}]*\}", "", path)

    parts = []
    for segment in path.split("."):
        # Match indexed array like field[0], field[1]
        match = re.match(r"(.+?)\[(\d+)\]$", segment)
        if match:
            parts.append((match.group(1), "array", int(match.group(2))))
        elif "[]" in segment:
            parts.append((segment.replace("[]", ""), "array", None))
        else:
            parts.append((segment, "dict", None))
    return parts

# === INSERT VALUE INTO NESTED STRUCTURE BASED ON PATH ===
def insert_nested(root, path, value):
    if not path:
        return value

    key, kind, index = path[0]

    if kind == "array":
        if key not in root or not isinstance(root[key], list):
            root[key] = []

        # Choose index: explicit [i] or always use first [0] if unspecified
        idx = index if index is not None else 0

        # Expand list to required size
        while len(root[key]) <= idx:
            root[key].append({})

        root[key][idx] = insert_nested(root[key][idx], path[1:], value)

    else:
        if key not in root or not isinstance(root[key], dict):
            root[key] = {}
        if path[1:]:
            root[key] = insert_nested(root[key], path[1:], value)
        else:
            root[key] = value

    return root

# === MAIN EXECUTION ===
df = pd.read_excel(input_file)
json_requests = []

for _, row in df.iterrows():
    request = {"headers": {}, "body": {}}

    # Extract headers
    for col in df.columns[:header_columns_count]:
        val = row[col]
        if pd.notna(val):
            request["headers"][col] = smart_cast(val)

    # Extract body
    body = {}
    for col in df.columns[header_columns_count:]:
        val = row[col]
        if pd.isna(val):
            continue
        val = smart_cast(val)
        path = parse_path(col)
        body = insert_nested(body, path, val)

    request["body"] = body
    json_requests.append(request)

# === WRITE OUTPUT ===
with open(output_file, "w") as f:
    json.dump(json_requests, f, indent=2)

print("‚úÖ JSON written to:", output_file)
