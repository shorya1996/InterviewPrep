import pandas as pd
import json
import re
from collections import defaultdict

input_file = "your_excel_file.xlsx"  # your file path
output_file = "final_output.json"
header_columns_count = 4

def smart_cast(val):
    if isinstance(val, float) and val.is_integer():
        return int(val)
    return val

def parse_path(path):
    # Convert path to structured keys, recognizing arrays by "[]"
    parts = []
    temp = ''
    in_brace = False
    for c in path:
        if c == '{':
            in_brace = True
            continue
        elif c == '}':
            in_brace = False
            continue
        elif c == '.' and not in_brace:
            if temp:
                parts.append(temp)
                temp = ''
            continue
        temp += c
    if temp:
        parts.append(temp)
    
    # Mark array keys
    cleaned = []
    for part in parts:
        if "[]" in part:
            cleaned.append((part.replace("[]", ""), "array"))
        else:
            cleaned.append((part, "dict"))
    return cleaned

def insert_nested(root, path, value):
    """Recursive insertion of value at nested path with array handling"""
    if not path:
        return value
    
    key, kind = path[0]
    
    if kind == "array":
        # Initialize list if not present
        if key not in root:
            root[key] = []
        
        # We’ll always insert as one object for now
        if len(root[key]) == 0:
            root[key].append({})
        
        root[key][0] = insert_nested(root[key][0], path[1:], value)
    else:
        if key not in root:
            root[key] = {}
        root[key] = insert_nested(root[key], path[1:], value)
    return root

# Load data
df = pd.read_excel(input_file)
json_requests = []

for _, row in df.iterrows():
    request = {"headers": {}, "body": {}}
    
    # Headers
    for col in df.columns[:header_columns_count]:
        val = row[col]
        if pd.notna(val):
            request["headers"][col] = smart_cast(val)

    # Body
    body = {}
    for col in df.columns[header_columns_count:]:
        val = row[col]
        if pd.isna(val):
            continue
        val = smart_cast(val)
        path = parse_path(col)
        body = insert_nested(body, path, val)

    request["body"] = body
    json_requests.append(request)

# Write output
with open(output_file, "w") as f:
    json.dump(json_requests, f, indent=2)

print("✅ JSON written to", output_file)
