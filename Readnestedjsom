import pandas as pd
import json
from collections import defaultdict
import re

# === CONFIG ===
input_file = "your_excel_file.xlsx"  # update with your actual file
output_file = "final_output.json"
header_columns_count = 4  # first N columns are request headers

def smart_cast(val):
    if isinstance(val, float) and val.is_integer():
        return int(val)
    return val

def parse_path(path):
    parts = []
    temp = ''
    in_brace = False
    for c in path:
        if c == '{':
            in_brace = True
            continue
        elif c == '}':
            in_brace = False
            continue
        elif c == '.' and not in_brace:
            if temp:
                parts.append(temp)
                temp = ''
            continue
        temp += c
    if temp:
        parts.append(temp)
    return parts

def nest_keys(keys, value):
    if not keys:
        return value
    return {keys[0]: nest_keys(keys[1:], value)}

def merge_dicts(a, b):
    for key in b:
        if key in a and isinstance(a[key], dict) and isinstance(b[key], dict):
            merge_dicts(a[key], b[key])
        else:
            a[key] = b[key]
    return a

# === READ DATA ===
df = pd.read_excel(input_file)
json_requests = []

# === DETECT ARRAY GROUPS ===
array_field_groups = defaultdict(list)

for col in df.columns[header_columns_count:]:
    base_col_match = re.match(r"(.+)\[\](\.\d+)?$", col)
    if base_col_match:
        base_key = base_col_match.group(1)
        array_field_groups[base_key].append(col)

# === PROCESS EACH ROW ===
for _, row in df.iterrows():
    request = {"headers": {}, "body": {}}

    # === HEADERS ===
    for col in df.columns[:header_columns_count]:
        val = row[col]
        if pd.notna(val):
            request["headers"][col] = smart_cast(val)

    used_array_columns = set()

    # === HANDLE ARRAYS FIRST ===
    for array_key, columns in array_field_groups.items():
        values = []
        for col in sorted(columns):  # maintain order
            val = row.get(col)
            if pd.notna(val):
                values.append(smart_cast(val))
            used_array_columns.add(col)
        if values:
            keys = parse_path(array_key)
            nested = nest_keys(keys, values)
            request["body"] = merge_dicts(request["body"], nested)

    # === HANDLE REGULAR FIELDS ===
    for col in df.columns[header_columns_count:]:
        if col in used_array_columns:
            continue
        val = row[col]
        if pd.isna(val):
            continue
        val = smart_cast(val)
        keys = parse_path(col)
        nested = nest_keys(keys, val)
        request["body"] = merge_dicts(request["body"], nested)

    json_requests.append(request)

# === WRITE FINAL JSON ===
with open(output_file, "w") as f:
    json.dump(json_requests, f, indent=2)

print("âœ… JSON written to", output_file)
