import pandas as pd
import json
from collections import defaultdict

# === CONFIGURATION ===
input_file = "your_excel_file.xlsx"  # Change to your file
output_file = "output.json"
header_columns_count = 4  # First 4 columns = request headers

# === Convert number values nicely ===
def smart_cast(val):
    if isinstance(val, float) and val.is_integer():
        return int(val)
    return val

# === Split path like a{b}.c into ['a', 'b', 'c'] ===
def parse_path(path):
    parts = []
    temp = ''
    in_brace = False
    for c in path:
        if c == '{':
            in_brace = True
            continue
        elif c == '}':
            in_brace = False
            continue
        elif c == '.' and not in_brace:
            if temp:
                parts.append(temp)
                temp = ''
            continue
        temp += c
    if temp:
        parts.append(temp)
    return parts

# === Build nested dict from keys ===
def nest_keys(keys, value):
    if not keys:
        return value
    return {keys[0]: nest_keys(keys[1:], value)}

# === Merge dictionaries recursively ===
def merge_dicts(a, b):
    for key in b:
        if key in a and isinstance(a[key], dict) and isinstance(b[key], dict):
            merge_dicts(a[key], b[key])
        else:
            a[key] = b[key]
    return a

# === READ DATA ===
df = pd.read_excel(input_file)
json_requests = []

# === PROCESS EACH ROW ===
for _, row in df.iterrows():
    request = {"headers": {}, "body": {}}
    array_fields = defaultdict(list)

    # Process headers
    for col in df.columns[:header_columns_count]:
        val = row[col]
        if pd.notna(val):
            request["headers"][col] = smart_cast(val)

    # Process body fields
    for col in df.columns[header_columns_count:]:
        val = row[col]
        if pd.isna(val):
            continue
        val = smart_cast(val)

        # If it's an array field like addressLine[]
        if col.endswith("[]"):
            array_key = col[:-2]  # remove []
            array_fields[array_key].append(val)
            continue

        # Regular field
        keys = parse_path(col)
        nested = nest_keys(keys, val)
        request["body"] = merge_dicts(request["body"], nested)

    # Inject array fields as proper lists
    for array_key, array_vals in array_fields.items():
        keys = parse_path(array_key)
        nested = nest_keys(keys, array_vals)  # array_vals is a list
        request["body"] = merge_dicts(request["body"], nested)

    json_requests.append(request)

# === WRITE FINAL OUTPUT ===
with open(output_file, "w") as f:
    json.dump(json_requests, f, indent=2)

# Optional: print first record
print(json.dumps(json_requests[0], indent=2))
