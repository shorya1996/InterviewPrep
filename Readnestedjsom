import pandas as pd
import json

# === CONFIG ===
input_file = "your_excel_file.xlsx"  # Update to your Excel file path
output_file = "final_output.json"
header_columns_count = 4  # First N columns are request headers

# === SMART TYPE CASTING ===
def smart_cast(val):
    if isinstance(val, float) and val.is_integer():
        return int(val)
    return val

# === PARSE PATH FROM COLUMN NAME ===
def parse_path(path):
    parts = []
    temp = ''
    in_brace = False
    for c in path:
        if c == '{':
            in_brace = True
        elif c == '}':
            in_brace = False
        elif c == '.' and not in_brace:
            if temp:
                parts.append(temp)
                temp = ''
            continue
        temp += c
    if temp:
        parts.append(temp)

    # Identify array keys
    cleaned = []
    for part in parts:
        if "[]" in part:
            cleaned.append((part.replace("[]", ""), "array"))
        else:
            cleaned.append((part, "dict"))
    return cleaned

# === SAFE NESTED INSERTION ===
def insert_nested(root, path, value):
    if not path:
        return value

    key, kind = path[0]

    if kind == "array":
        if key not in root or not isinstance(root[key], list):
            root[key] = []

        if not root[key] or not isinstance(root[key][0], dict):
            root[key] = [{}]

        root[key][0] = insert_nested(root[key][0], path[1:], value)

    else:
        if key not in root or not isinstance(root[key], dict):
            root[key] = {}

        if path[1:]:
            root[key] = insert_nested(root[key], path[1:], value)
        else:
            root[key] = value

    return root

# === MAIN EXECUTION ===
df = pd.read_excel(input_file)
json_requests = []

for _, row in df.iterrows():
    request = {"headers": {}, "body": {}}

    # Process headers
    for col in df.columns[:header_columns_count]:
        val = row[col]
        if pd.notna(val):
            request["headers"][col] = smart_cast(val)

    # Process body
    body = {}
    for col in df.columns[header_columns_count:]:
        val = row[col]
        if pd.isna(val):
            continue
        val = smart_cast(val)
        path = parse_path(col)
        body = insert_nested(body, path, val)

    request["body"] = body
    json_requests.append(request)

# === WRITE TO JSON FILE ===
with open(output_file, "w") as f:
    json.dump(json_requests, f, indent=2)

print("âœ… JSON file written to:", output_file)
