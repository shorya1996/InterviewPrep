import pandas as pd
import json
from collections import defaultdict

# --- Config ---
input_file = "your_excel_file.xlsx"  # Change this to your actual file path
output_file = "final_request_payloads.json"
header_columns_count = 4  # Adjust if you have more/less header columns

# --- Smart cast: keep numbers clean, remove .0 if integer ---
def smart_cast(val):
    if isinstance(val, float):
        if val.is_integer():
            return int(val)
        return val
    return val

# --- Parse path like a{b}.c into ['a', 'b', 'c'] ---
def parse_path(path):
    parts = []
    temp = ''
    in_brace = False
    for c in path:
        if c == '{':
            in_brace = True
            continue
        elif c == '}':
            in_brace = False
            continue
        elif c == '.' and not in_brace:
            if temp:
                parts.append(temp)
                temp = ''
            continue
        temp += c
    if temp:
        parts.append(temp)
    return parts

# --- Build nested structure from keys and value ---
def nest_keys(keys, value):
    if not keys:
        return value
    return {keys[0]: nest_keys(keys[1:], value)}

# --- Merge nested dictionaries recursively ---
def merge_dicts(a, b):
    for key in b:
        if key in a and isinstance(a[key], dict) and isinstance(b[key], dict):
            merge_dicts(a[key], b[key])
        else:
            a[key] = b[key]
    return a

# --- Load Excel ---
df = pd.read_excel(input_file)
json_requests = []

# --- Process each row ---
for _, row in df.iterrows():
    request = {"headers": {}, "body": {}}
    array_fields = defaultdict(list)

    # --- Handle request headers ---
    for col in df.columns[:header_columns_count]:
        val = row[col]
        if pd.notna(val):
            request["headers"][col] = smart_cast(val)

    # --- Handle body fields ---
    for col in df.columns[header_columns_count:]:
        val = row[col]
        if pd.isna(val):
            continue
        val = smart_cast(val)

        # --- Array columns ---
        if col.endswith("[]"):
            base_col = col[:-2]  # Remove [] from name
            array_fields[base_col].append(val)
            continue

        # --- Regular nested fields ---
        keys = parse_path(col)
        nested = nest_keys(keys, val)
        request["body"] = merge_dicts(request["body"], nested)

    # --- Merge collected arrays into body ---
    for array_path, array_values in array_fields.items():
        keys = parse_path(array_path)
        nested = nest_keys(keys, array_values)
        request["body"] = merge_dicts(request["body"], nested)

    json_requests.append(request)

# --- Output final JSON ---
with open(output_file, "w") as f:
    json.dump(json_requests, f, indent=2)

# Optional: print one sample
print(json.dumps(json_requests[0], indent=2))
