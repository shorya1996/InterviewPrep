Target time: < 10 minutes

A company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.

Write an SQL query to find the employees who are high earners in each of the departments.

Return the result table in any order.



Employee table:

+----+-------+--------+--------------+

| Id | Name  | Salary | DepartmentId |

+----+-------+--------+--------------+

| 1  | Joe       | 85000  | 1           |

| 2  | Henry  | 80000  | 2           |

| 3  | Sam    | 60000  | 2           |

| 4  | Max    | 90000  | 1            |

| 5  | Janet  | 69000  | 1            |

| 6  | Randy | 85000  | 1            |

| 7  | Will      | 70000  | 1            |

+----+-------+--------+--------------+



Department table:

+----+-------+

| Id | Name  |

+----+-------+

| 1   | IT      |

| 2  | Sales |

+----+-------+



For example, your query should return the following for the above table:

+------------+----------+--------+

| Department | Employee | Salary |

+------------+----------+--------+

| IT         | Max      | 90000  |

| IT         | Joe       | 85000  |

| IT         | Randy  | 85000  |

| IT         | Will       | 70000  |

| Sales   | Henry   | 80000  |

| Sales   | Sam      | 60000  |

+------------+----------+--------+



In the IT department:

- Max earns the highest unique salary

- Both Randy and Joe earn the second-highest unique salary

- Will earns the third-highest unique salary



In the Sales department:

- Henry earns the highest salary

- Sam earns the second-highest salary

- There is no third-highest salary as there are only two employees

with rnk_tbl as (
    select  *, dense_rank() over (partition by DepartmentId order by Salary desc) as rnk
from Employee as a
)

select 
    b.Name as Department, 
    a.Name as Employee, 
    a.Salary
from rnk_tbl a
inner join Department b
    on a.DepartmentId = b.Id
where a.rnk <= 3
Target time: < 5 minutes



Write a SQL query to find all duplicate emails in a table named Person.



Person table:

+----+---------+

| Id | Email   |

+----+---------+

| 1  | a@b.com |

| 2  | c@d.com |

| 3  | a@b.com |

+----+---------+



For example, your query should return the following for the above table:

+---------+

| Email   |

+---------+

| a@b.com |

+---------+

select 
    Email
from Person
group by Email
having count(*) > 1
Target time: < 10 minutes



Write a SQL query to find all distinct routes in the Routes table. A route from B to A is considered a duplicate of a route from A to B. You should return the instance that comes first alphabetically based on the Pickup.



Routes table:

+----+---------+

| Pickup | Dropoff |

+----+---------+

| A | B |

| C | D |

| B | A |

| C | D |

+----+---------+



For example, your query should return the following for the above table:

+----+---------+

| Pickup | Dropoff |

+----+---------+

| A | B |

| C | D |

+----+---------+

with tbl_1 as (
select 
    min(Pickup, Dropoff) as p,
    max(Pickup, Dropoff) as d
from Routes
)

select distinct 
    p as Pickup, 
    d as Dropoff
from tbl_1
Target time: < 10 minutes



Write a SQL query to return:

1. The number of people in the IT department who have a salary greater than 70000

2. The number of people in the Sales department who have a salary greater than 50000



Employee table:

+----+-------+--------+--------------+

| Id | Name | Salary | DepartmentId |

+----+-------+--------+--------------+

| 1 | Joe | 85000 | 1 |

| 2 | Henry | 80000 | 2 |

| 3 | Sam | 60000 | 2 |

| 4 | Max | 90000 | 1 |

| 5 | Janet | 69000 | 1 |

| 6 | Randy | 85000 | 1 |

| 7 | Will | 70000 | 1 |

+----+-------+--------+--------------+



Department table:

+----+-------+

| Id | Name |

+----+-------+

| 1 | IT |

| 2 | Sales |

+----+-------+



For example, your query should return the following for the above table:

+----+-------+

| Department | Count |

+----+-------+

| IT       | 3 |

| Sales | 2 |

+----+-------+

Approach 1: CTEs or subqueries

Although functional, this approach is not efficient as it does 2 passes of the underlying data.

with it as (
select 
    b.Name as Department,
    count(*) as Count
from Employee a
inner join Department b
     on a.DepartmentId = b.Department
where b.Name = 'IT'
and a.Salary > 70000
)

, sales as (
select 
    b.Name as Department,
    count(*) as Count
from Employee a
inner join Department b
     on a.DepartmentId = b.Department
where b.Name = 'Sales'
and a.Salary > 50000
)

select *
from it
union 
select *
from sales


Approach 2:

This approach is more efficient since it only requires 1 pass of the underlying data.

select 
    Department,
    sum(cnt) as Count
from (select 
        b.Name as Department,
        case
            when b.Name = 'IT' and a.Salary > 70000
            then 1
            when b.Name = 'Sales' and a.Salary > 50000
            then 1
            else 0
        end as cnt
    from Employee a
    inner join Department b
         on a.DepartmentId = b.Department) a
group by Department